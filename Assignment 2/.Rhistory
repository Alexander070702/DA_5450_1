# Load the caret package for data partitioning
library("caret")
library(tidyverse)
library(ggplot2)
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
# Create bar plots for all variables differentiated into churn vs. no churn
# Create bar plots for all variables differentiated into churn vs. no churn
# Create bar plots for all variables differentiated into churn vs. no churn
for (col in names(churndat)){
if (col != "state" && col != "area_code" && col != "phone_number") {
plot_data <- churndat %>%
group_by(!!sym(col), churn) %>%
summarise(n = n()) %>%
mutate(prop = n/sum(n)) %>%
ungroup()
if (is.numeric(churndat[[col]])) {
print(ggplot(data = plot_data, aes(x = !!sym(col), y = prop, fill = as.factor(churn))) +
geom_col(position = "dodge") +
labs(title = paste("Churn by", col), x = col, y = "Proportion", fill = "Churn") +
theme_minimal() +
scale_fill_manual(values = c("#00BFC4", "#F8766D")))
} else {
print(ggplot(data = plot_data, aes(x = !!sym(col), y = prop, fill = as.factor(churn))) +
geom_col(position = "dodge") +
labs(title = paste("Churn by", col), x = col, y = "Proportion", fill = "Churn") +
theme_minimal() +
scale_fill_manual(values = c("#00BFC4", "#F8766D")) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)))
}
}
}
# Split the data into training and testing sets, with 80% for training and 20% for testing
set.seed(123) # for reproducibility
# Create bar plots for all variables differentiated into churn vs. no churn
for (col in names(churndat)) {
if (col != "state" && col != "area_code" && col != "phone_number") {
plot_data <- churndat %>%
group_by(churn, !!sym(col)) %>%
summarise(n = n())
if (class(plot_data[[2]]) == "character") {
plot <- ggplot(plot_data, aes(x = !!sym(col), y = n, fill = factor(churn))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = col, x = col, y = "Frequency") +
theme(legend.title = element_blank(), legend.position = "bottom")
} else {
plot <- ggplot(plot_data, aes(x = factor(churn), y = n, fill = !!sym(col))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = col, x = "Churn", y = "Frequency") +
theme(legend.title = element_blank(), legend.position = "bottom")
}
print(plot)
}
}
# Create bar plots for all variables differentiated into churn vs. no churn
# Create plots for all variables differentiated into churn vs. no churn
for (col in names(churndat)) {
if (col != "state" && col != "area_code" && col != "phone_number") {
plot_data <- churndat %>%
group_by(churn, !!sym(col)) %>%
summarise(n = n()) %>%
ungroup()
if (class(plot_data[[2]]) == "character") {
plot <- ggplot(plot_data, aes(x = !!sym(col), y = n, fill = factor(churn))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = col, x = col, y = "Frequency") +
theme(legend.title = element_blank(), legend.position = "bottom")
} else {
plot <- ggplot(plot_data, aes(x = factor(churn), y = n, fill = !!sym(col))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = col, x = "Churn", y = "Frequency") +
theme(legend.title = element_blank(), legend.position = "bottom")
}
print(plot)
}
}
# Load the caret package for data partitioning
library("caret")
library(tidyverse)
library(ggplot2)
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
# Create bar plots for all variables differentiated into churn vs. no churn
# Create plots for all variables differentiated into churn vs. no churn
for (col in names(churndat)) {
if (col != "state" && col != "area_code" && col != "phone_number") {
plot_data <- churndat %>%
group_by(churn, !!sym(col)) %>%
summarise(n = n()) %>%
ungroup()
if (class(plot_data[[2]]) == "character") {
plot <- ggplot(plot_data, aes(x = !!sym(col), y = n, fill = factor(churn))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = col, x = col, y = "Frequency") +
theme(legend.title = element_blank(), legend.position = "bottom")
} else {
plot <- ggplot(plot_data, aes(x = factor(churn), y = n, fill = !!sym(col))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = col, x = "Churn", y = "Frequency") +
theme(legend.title = element_blank(), legend.position = "bottom")
}
print(plot)
}
}
# Load the caret package for data partitioning
library("caret")
library(tidyverse)
library(ggplot2)
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
# Load the caret package for data partitioning
library("caret")
library(tidyverse)
library(ggplot2)
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
# Create bar plots for all variables differentiated into churn vs. no churn
# Define a function to create the appropriate plot for each variable
plot_variable <- function(var) {
# Create a bar plot for categorical variables
if (is.factor(var) | is.logical(var)) {
ggplot(churndat, aes(x=churn, fill=var)) +
geom_bar(position="dodge") +
labs(x="Churn", y="Count")
}
# Create a histogram for numerical variables
else {
ggplot(churndat, aes(x=var, fill=churn)) +
geom_histogram(position="dodge", alpha=0.5, bins=10) +
labs(x=names(churndat[var]), y="Count")
}
}
# Loop through each variable and generate a plot
for (col in names(churndat)[-1]) {
print(plot_variable(churndat[,col]))
}
# Load the caret package for data partitioning
library("caret")
library(tidyverse)
library(ggplot2)
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
# Create bar plots for all variables differentiated into churn vs. no churn
# Define a function to plot appropriate graphs for each variable
plot_churn_var <- function(var) {
# Group the data by churn and variable
churndat %>%
group_by(churn, !!sym(var)) %>%
summarise(n = n()) %>%
ungroup() %>%
# Plot a graph based on the variable type
ggplot(aes(x = !!sym(var), y = n, fill = as.factor(churn))) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = var, y = "Count", fill = "Churn") +
theme_bw()
}
# Plot graphs for all variables
churn_vars <- names(churndat)[-1]  # Exclude churn variable
plots_list <- lapply(churn_vars, plot_churn_var)
# View the plots
plots_list
# Split the data into training and testing sets, with 80% for training and 20% for testing
set.seed(123) # for reproducibility
#structure of the data
str(churndat)
# Create bar plots for all variables differentiated into churn vs. no churn
# Loop through all variables and generate appropriate plots
for (var in names(churndat)[-1]) {
ggplot(churndat, aes(x = churn, y = !!sym(var), fill = factor(churn))) +
geom_boxplot() +
ggtitle(paste("Churn vs", var)) +
xlab("Churn") +
ylab(var) +
theme(plot.title = element_text(hjust = 0.5))
}
# Split the data into training and testing sets, with 80% for training and 20% for testing
set.seed(123) # for reproducibility
# Load the caret package for data partitioning
library("caret")
library(tidyverse)
library(ggplot2)
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
# Create bar plots for all variables differentiated into churn vs. no churn
# Loop through all variables and generate appropriate plots
for (var in names(churndat)[-1]) {
ggplot(churndat, aes(x = churn, y = !!sym(var), fill = factor(churn))) +
geom_boxplot() +
ggtitle(paste("Churn vs", var)) +
xlab("Churn") +
ylab(var) +
theme(plot.title = element_text(hjust = 0.5))
}
# Create bar plots for all variables differentiated into churn vs. no churn
# Loop through all variables and generate appropriate plots
for (var in names(churndat)[-1]) {
ggplot(churndat, aes(x = churn, y = !!sym(var), fill = factor(churn))) +
geom_boxplot() +
ggtitle(paste("Churn vs", var)) +
xlab("Churn") +
ylab(var) +
theme(plot.title = element_text(hjust = 0.5))
print(plot)
}
source("~/Desktop/DA_5450_1/Assignment 2/Assignment_2.R")
# Load the caret package for data partitioning
library("caret")
library(tidyverse)
library(ggplot2)
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
# Create bar plots for all variables differentiated into churn vs. no churn
# Loop through all variables and generate appropriate plots
for (var in names(churndat)[-1]) {
ggplot(churndat, aes(x = churn, y = !!sym(var), fill = factor(churn))) +
geom_boxplot() +
ggtitle(paste("Churn vs", var)) +
xlab("Churn") +
ylab(var) +
theme(plot.title = element_text(hjust = 0.5))
}
ggplot(churndat, aes(x = churn, y = !!sym(var), fill = factor(churn))) +
geom_boxplot() +
ggtitle(paste("Churn vs", var)) +
xlab("Churn") +
ylab(var) +
theme(plot.title = element_text(hjust = 0.5))
# Create bar plots for all variables differentiated into churn vs. no churn
# Loop through all variables and generate appropriate plots
for (var in names(churndat)[-1]) {
ggplot(churndat, aes(x = churn, y = !!sym(var), fill = factor(churn))) +
geom_boxplot() +
ggtitle(paste("Churn vs", var)) +
xlab("Churn") +
ylab(var) +
theme(plot.title = element_text(hjust = 0.5))
}
# Load the caret package for data partitioning
library("caret")
library(tidyverse)
library(ggplot2)
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
# Create bar plots for all variables differentiated into churn vs. no churn
# Loop through all variables and generate appropriate plots
for (var in names(churndat)[-1]) {
ggplot(churndat, aes(x = churn, y = !!sym(var), fill = factor(churn))) +
geom_boxplot() +
ggtitle(paste("Churn vs", var)) +
xlab("Churn") +
ylab(var) +
theme(plot.title = element_text(hjust = 0.5))
}
# Split the data into training and testing sets, with 80% for training and 20% for testing
set.seed(123) # for reproducibility
# Load the caret package for data partitioning
library("caret")
library(tidyverse)
library(ggplot2)
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
# Create bar plots for all variables differentiated into churn vs. no churn
# Loop through all variables and generate appropriate plots
for (var in names(churndat)[-1]) {
ggplot(churndat, aes(x = churn, y = !!sym(var), fill = factor(churn))) +
geom_boxplot() +
ggtitle(paste("Churn vs", var)) +
xlab("Churn") +
ylab(var) +
theme(plot.title = element_text(hjust = 0.5))
}
# Split the data into training and testing sets, with 80% for training and 20% for testing
set.seed(123) # for reproducibility
# Create bar plots for all variables differentiated into churn vs. no churn
# Loop through all variables and generate appropriate plots
for(var in names(churndat)[-1]){
if(var == "internationalplan" | var == "voicemailplan" | var == "churn"){
# Skip binary variables and churn
next
} else {
# Create a plot of the variable split by churn
ggplot(churndat, aes_string(x=var, fill="factor(churn)")) +
geom_bar(position="dodge") +
labs(title=paste("Churn vs.", var), x=var, y="Count") +
theme(plot.title = element_text(hjust = 0.5))
}
}
# Load the caret package for data partitioning
library("caret")
library(tidyverse)
library(ggplot2)
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
# Create bar plots for all variables differentiated into churn vs. no churn
# Loop through all variables and generate appropriate plots
for(var in names(churndat)[-1]){
if(var == "internationalplan" | var == "voicemailplan" | var == "churn"){
# Skip binary variables and churn
next
} else {
# Create a plot of the variable split by churn
ggplot(churndat, aes_string(x=var, fill="factor(churn)")) +
geom_bar(position="dodge") +
labs(title=paste("Churn vs.", var), x=var, y="Count") +
theme(plot.title = element_text(hjust = 0.5))
}
}
# Split the data into training and testing sets, with 80% for training and 20% for testing
set.seed(123) # for reproducibility
train_index <- createDataPartition(churndat$churn, p = 0.8, list = FALSE)
source("~/Desktop/DA_5450_1/Assignment 2/Assignment_2.R")
source("~/Desktop/DA_5450_1/Assignment 2/Assignment_2.R")
source("~/Desktop/DA_5450_1/Assignment 2/Assignment_2.R")
# Load the caret package for data partitioning
library("caret")
library(tidyverse)
library(ggplot2)
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
#Generate appropriate graphs for all variables differentiated into churn vs. no churn. Which variables
#seem to be related to churn?
ggplot2::ggplot(churndat, aes(x = accountlength, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = internationalplan, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = voicemailplan, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = numbervmailmessages, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = totaldayminutes, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = totaldaycalls, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = totaldaycharge, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = totaleveminutes, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = totalevecalls, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = totalevecharge, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = totalnightminutes, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = totalnightcalls, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = totalnightcharge, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = totalintlcalls, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = totalintlcharge, y = churn)) + geom_point()
ggplot2::ggplot(churndat, aes(x = numbercustomerservicecalls, y = churn)) + geom_point()
source("~/Desktop/DA_5450_1/Assignment 2/Assignment_2.R")
source("~/Desktop/DA_5450_1/Assignment 2/Assignment_2.R")
# Load the caret package for data partitioning
library("caret")
library("ggplot2")
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
#Generate appropriate graphs for all variables differentiated into churn vs. no churn. Which variables
#seem to be related to churn?
# Type of graph should be chosen based on the variable type (categorical, continuous, etc.) and pick the best one.
# You can use the ggplot2 package for this task.
# You can use the following code as a starting point:
ggplot(churndat, aes(x = variable, fill = churn)) + geom_bar() + facet_wrap(~variable, scales = "free")
source("~/Desktop/DA_5450_1/Assignment 2/Assignment_2.R")
# Load the caret package for data partitioning
library("caret")
library("ggplot2")
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
#accountlength
ggplot(churndat, aes(x = accountlength, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Account Length", y = "Count", title = "Account Length Distribution")
#internationalplan
ggplot(churndat, aes(x = internationalplan, fill = churn)) + geom_bar(position = "dodge") + labs(x = "International Plan", y = "Count", title = "International Plan Distribution")
#voicemailplan
ggplot(churndat, aes(x = voicemailplan, fill = churn)) + geom_bar(position = "dodge") + labs(x = "Voicemail Plan", y = "Count", title = "Voicemail Plan Distribution")
#numbercustomerservicecalls
ggplot(churndat, aes(x = numbercustomerservicecalls, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Number of Customer Service Calls", y = "Count", title = "Number of Customer Service Calls Distribution")
#totaldayminutes
ggplot(churndat, aes(x = totaldayminutes, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Day Minutes", y = "Count", title = "Total Day Minutes Distribution")
#totaldaycalls
ggplot(churndat, aes(x = totaldaycalls, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Day Calls", y = "Count", title = "Total Day Calls Distribution")
#totaldaycharge
ggplot(churndat, aes(x = totaldaycharge, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Day Charge", y = "Count", title = "Total Day Charge Distribution")
#totaleveminutes
ggplot(churndat, aes(x = totaleveminutes, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Eve Minutes", y = "Count", title = "Total Eve Minutes Distribution")
#totalevecalls
ggplot(churndat, aes(x = totalevecalls, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Eve Calls", y = "Count", title = "Total Eve Calls Distribution")
#totalevecharge
ggplot(churndat, aes(x = totalevecharge, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Eve Charge", y = "Count", title = "Total Eve Charge Distribution")
#totalnightminutes
ggplot(churndat, aes(x = totalnightminutes, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Night Minutes", y = "Count", title = "Total Night Minutes Distribution")
#totalnightcalls
ggplot(churndat, aes(x = totalnightcalls, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Night Calls", y = "Count", title = "Total Night Calls Distribution")
#totalnightcharge
ggplot(churndat, aes(x = totalnightcharge, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Night Charge", y = "Count", title = "Total Night Charge Distribution")
#totalintlcalls
ggplot(churndat, aes(x = totalintlcalls, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Intl Calls", y = "Count", title = "Total Intl Calls Distribution")
#totalintlcharge
ggplot(churndat, aes(x = totalintlcharge, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Intl Charge", y = "Count", title = "Total Intl Charge Distribution")
#numbervmailmessages
ggplot(churndat, aes(x = numbervmailmessages, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Number of Vmail Messages", y = "Count", title = "Number of Vmail Messages Distribution")
# 2 Splitting the data to training set and test set
# Split the data into training and testing sets, with 80% for training and 20% for testing
set.seed(123) # for reproducibility
source("~/Desktop/DA_5450_1/Assignment 2/Assignment_2.R")
# Load the caret package for data partitioning
library("caret")
library("ggplot2")
# Load the churn dataset from a URL and convert the churn variable to binary
churndat <- read.csv(url("https://statmath.wu.ac.at/~malsiner/datasets/churn.csv"))
churndat$churn <- ifelse(churndat$churn == "Yes", 1, 0)
# Convert the internationalplan and voicemailplan variables to binary
churndat$internationalplan <- ifelse(churndat$internationalplan == "yes", 1, 0)
churndat$voicemailplan <- ifelse(churndat$voicemailplan == "yes", 1, 0)
#structure of the data
str(churndat)
#Generate appropriate graphs for all variables differentiated into churn vs. no churn.
#accountlength
ggplot(churndat, aes(x = accountlength, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Account Length", y = "Count", title = "Account Length Distribution")
#internationalplan
ggplot(churndat, aes(x = internationalplan, fill = churn)) + geom_bar(position = "dodge") + labs(x = "International Plan", y = "Count", title = "International Plan Distribution")
#voicemailplan
ggplot(churndat, aes(x = voicemailplan, fill = churn)) + geom_bar(position = "dodge") + labs(x = "Voicemail Plan", y = "Count", title = "Voicemail Plan Distribution")
#numbercustomerservicecalls
ggplot(churndat, aes(x = numbercustomerservicecalls, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Number of Customer Service Calls", y = "Count", title = "Number of Customer Service Calls Distribution")
#totaldayminutes
ggplot(churndat, aes(x = totaldayminutes, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Day Minutes", y = "Count", title = "Total Day Minutes Distribution")
#totaldaycalls
ggplot(churndat, aes(x = totaldaycalls, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Day Calls", y = "Count", title = "Total Day Calls Distribution")
#totaldaycharge
ggplot(churndat, aes(x = totaldaycharge, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Day Charge", y = "Count", title = "Total Day Charge Distribution")
#totaleveminutes
ggplot(churndat, aes(x = totaleveminutes, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Eve Minutes", y = "Count", title = "Total Eve Minutes Distribution")
#totalevecalls
ggplot(churndat, aes(x = totalevecalls, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Eve Calls", y = "Count", title = "Total Eve Calls Distribution")
#totalevecharge
ggplot(churndat, aes(x = totalevecharge, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Eve Charge", y = "Count", title = "Total Eve Charge Distribution")
#totalnightminutes
ggplot(churndat, aes(x = totalnightminutes, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Night Minutes", y = "Count", title = "Total Night Minutes Distribution")
#totalnightcalls
ggplot(churndat, aes(x = totalnightcalls, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Night Calls", y = "Count", title = "Total Night Calls Distribution")
#totalnightcharge
ggplot(churndat, aes(x = totalnightcharge, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Night Charge", y = "Count", title = "Total Night Charge Distribution")
#totalintlcalls
ggplot(churndat, aes(x = totalintlcalls, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Intl Calls", y = "Count", title = "Total Intl Calls Distribution")
#totalintlcharge
ggplot(churndat, aes(x = totalintlcharge, fill = churn)) + geom_histogram(bins = 20, position = "identity") + labs(x = "Total Intl Charge", y = "Count", title = "Total Intl Charge Distribution")
